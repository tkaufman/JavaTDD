<testng-results>
  <reporter-output>
  </reporter-output>
  <suite name="All Blog Tests">
    <groups>
    </groups>
    <test name="UnitTests">
      <class name="com.pillartech.blog.ui.AuthenticationFilterTest">
        <test-method status="PASS" signature="setUp()" name="setUp" is-config="true" duration-ms="0" started-at="2010-02-08T15:55:09Z" finished-at="2010-02-08T15:55:09Z">
        </test-method>
        <test-method status="PASS" signature="setUp()" name="setUp" is-config="true" duration-ms="0" started-at="2010-02-08T15:55:09Z" finished-at="2010-02-08T15:55:09Z">
        </test-method>
        <test-method status="PASS" signature="testWithUserInSessionPassesThrough()" name="testWithUserInSessionPassesThrough" duration-ms="11" started-at="2010-02-08T15:55:09Z" finished-at="2010-02-08T15:55:09Z">
        </test-method>
        <test-method status="PASS" signature="setUp()" name="setUp" is-config="true" duration-ms="14" started-at="2010-02-08T15:55:09Z" finished-at="2010-02-08T15:55:09Z">
        </test-method>
        <test-method status="PASS" signature="testGoingToLoginBlindlyPassesThrough()" name="testGoingToLoginBlindlyPassesThrough" duration-ms="1" started-at="2010-02-08T15:55:09Z" finished-at="2010-02-08T15:55:09Z">
        </test-method>
        <test-method status="PASS" signature="testWithoutUserInSessionRedirectsToLogin()" name="testWithoutUserInSessionRedirectsToLogin" duration-ms="1" started-at="2010-02-08T15:55:09Z" finished-at="2010-02-08T15:55:09Z">
        </test-method>
      </class>
      <class name="com.pillartech.blog.LoginServiceTest">
        <test-method status="PASS" signature="setupMocksAndTargetForDefaultBehavior()" name="setupMocksAndTargetForDefaultBehavior" is-config="true" duration-ms="1" started-at="2010-02-08T15:55:09Z" finished-at="2010-02-08T15:55:09Z">
        </test-method>
        <test-method status="PASS" signature="shouldNotInactivateUsersAfterThreeTotalFailedPasswords_RepetitiveApproach()" name="shouldNotInactivateUsersAfterThreeTotalFailedPasswords_RepetitiveApproach" duration-ms="5" started-at="2010-02-08T15:55:09Z" finished-at="2010-02-08T15:55:09Z">
        </test-method>
        <test-method status="PASS" signature="shouldNotInactivateUsersAfterThreeTotalFailedPasswords_CustomMatcherApproach()" name="shouldNotInactivateUsersAfterThreeTotalFailedPasswords_CustomMatcherApproach" duration-ms="6" started-at="2010-02-08T15:55:09Z" finished-at="2010-02-08T15:55:09Z">
        </test-method>
        <test-method status="PASS" signature="setupMocksAndTargetForDefaultBehavior()" name="setupMocksAndTargetForDefaultBehavior" is-config="true" duration-ms="1" started-at="2010-02-08T15:55:09Z" finished-at="2010-02-08T15:55:09Z">
        </test-method>
        <test-method status="PASS" signature="setupMocksAndTargetForDefaultBehavior()" name="setupMocksAndTargetForDefaultBehavior" is-config="true" duration-ms="1" started-at="2010-02-08T15:55:09Z" finished-at="2010-02-08T15:55:09Z">
        </test-method>
        <test-method status="PASS" signature="shouldThrowBusinessExceptionIfDatabaseIsDown()" name="shouldThrowBusinessExceptionIfDatabaseIsDown" duration-ms="3" started-at="2010-02-08T15:55:09Z" finished-at="2010-02-08T15:55:09Z">
          <exception class="com.pillartech.blog.exception.AccountNotFoundException">
            <message>
              <![CDATA[Unable to find account due to underlying issue]]>
            </message>
            <full-stacktrace>
              <![CDATA[com.pillartech.blog.exception.AccountNotFoundException: Unable to find account due to underlying issue
	at com.pillartech.blog.LoginServiceImpl.findAccountByUsername(LoginServiceImpl.java:48)
	at com.pillartech.blog.LoginServiceImpl.login(LoginServiceImpl.java:22)
	at com.pillartech.blog.LoginServiceTest.shouldThrowBusinessExceptionIfDatabaseIsDown(LoginServiceTest.java:149)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.testng.internal.MethodHelper.invokeMethod(MethodHelper.java:607)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:517)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:669)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:956)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:110)
	at org.testng.TestRunner.runWorkers(TestRunner.java:759)
	at org.testng.TestRunner.privateRun(TestRunner.java:592)
	at org.testng.TestRunner.run(TestRunner.java:486)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:332)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:327)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:299)
	at org.testng.SuiteRunner.run(SuiteRunner.java:204)
	at org.testng.TestNG.createAndRunSuiteRunners(TestNG.java:877)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:842)
	at org.testng.TestNG.run(TestNG.java:751)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:74)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:92)
	at org.apache.maven.surefire.Surefire.run(Surefire.java:177)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.apache.maven.surefire.booter.SurefireBooter.runSuitesInProcess(SurefireBooter.java:345)
	at org.apache.maven.surefire.booter.SurefireBooter.main(SurefireBooter.java:1009)
Caused by: java.lang.RuntimeException
	at com.pillartech.blog.LoginServiceImpl.findAccountByUsername(LoginServiceImpl.java:41)
	... 31 more
]]>
            </full-stacktrace>
          </exception>
        </test-method>
        <test-method status="PASS" signature="setupMocksAndTargetForDefaultBehavior()" name="setupMocksAndTargetForDefaultBehavior" is-config="true" duration-ms="2" started-at="2010-02-08T15:55:09Z" finished-at="2010-02-08T15:55:09Z">
        </test-method>
        <test-method status="PASS" signature="shouldNotLoginBadPasswords()" name="shouldNotLoginBadPasswords" duration-ms="16" started-at="2010-02-08T15:55:09Z" finished-at="2010-02-08T15:55:09Z">
        </test-method>
        <test-method status="PASS" signature="setupMocksAndTargetForDefaultBehavior()" name="setupMocksAndTargetForDefaultBehavior" is-config="true" duration-ms="1" started-at="2010-02-08T15:55:09Z" finished-at="2010-02-08T15:55:09Z">
        </test-method>
        <test-method status="PASS" signature="setupMocksAndTargetForDefaultBehavior()" name="setupMocksAndTargetForDefaultBehavior" is-config="true" duration-ms="1" started-at="2010-02-08T15:55:09Z" finished-at="2010-02-08T15:55:09Z">
        </test-method>
        <test-method status="PASS" signature="shouldInactivateAfterThreeFailedPasswords()" name="shouldInactivateAfterThreeFailedPasswords" duration-ms="13" started-at="2010-02-08T15:55:09Z" finished-at="2010-02-08T15:55:09Z">
        </test-method>
        <test-method status="PASS" signature="shouldThrowAnExceptionIfAccountIsInactive()" name="shouldThrowAnExceptionIfAccountIsInactive" duration-ms="2" started-at="2010-02-08T15:55:09Z" finished-at="2010-02-08T15:55:09Z">
          <exception class="com.pillartech.blog.exception.AccountRevokedException">
            <message>
              <![CDATA[Account has been revoked for too many failed login attempts.]]>
            </message>
            <full-stacktrace>
              <![CDATA[com.pillartech.blog.exception.AccountRevokedException: Account has been revoked for too many failed login attempts.
	at com.pillartech.blog.LoginServiceImpl.login(LoginServiceImpl.java:25)
	at com.pillartech.blog.LoginServiceTest.shouldThrowAnExceptionIfAccountIsInactive(LoginServiceTest.java:143)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.testng.internal.MethodHelper.invokeMethod(MethodHelper.java:607)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:517)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:669)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:956)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:110)
	at org.testng.TestRunner.runWorkers(TestRunner.java:759)
	at org.testng.TestRunner.privateRun(TestRunner.java:592)
	at org.testng.TestRunner.run(TestRunner.java:486)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:332)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:327)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:299)
	at org.testng.SuiteRunner.run(SuiteRunner.java:204)
	at org.testng.TestNG.createAndRunSuiteRunners(TestNG.java:877)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:842)
	at org.testng.TestNG.run(TestNG.java:751)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:74)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:92)
	at org.apache.maven.surefire.Surefire.run(Surefire.java:177)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.apache.maven.surefire.booter.SurefireBooter.runSuitesInProcess(SurefireBooter.java:345)
	at org.apache.maven.surefire.booter.SurefireBooter.main(SurefireBooter.java:1009)
]]>
            </full-stacktrace>
          </exception>
        </test-method>
        <test-method status="PASS" signature="setupMocksAndTargetForDefaultBehavior()" name="setupMocksAndTargetForDefaultBehavior" is-config="true" duration-ms="1" started-at="2010-02-08T15:55:09Z" finished-at="2010-02-08T15:55:09Z">
        </test-method>
        <test-method status="PASS" signature="shouldLoginValidPasswords()" name="shouldLoginValidPasswords" duration-ms="2" started-at="2010-02-08T15:55:09Z" finished-at="2010-02-08T15:55:09Z">
        </test-method>
        <test-method status="PASS" signature="shouldThrowAnExceptionIfAccountIsNotFound()" name="shouldThrowAnExceptionIfAccountIsNotFound" duration-ms="1" started-at="2010-02-08T15:55:09Z" finished-at="2010-02-08T15:55:09Z">
          <exception class="com.pillartech.blog.exception.AccountNotFoundException">
            <message>
              <![CDATA[Account with username todd was not found.]]>
            </message>
            <full-stacktrace>
              <![CDATA[com.pillartech.blog.exception.AccountNotFoundException: Account with username todd was not found.
	at com.pillartech.blog.LoginServiceImpl.findAccountByUsername(LoginServiceImpl.java:43)
	at com.pillartech.blog.LoginServiceImpl.login(LoginServiceImpl.java:22)
	at com.pillartech.blog.LoginServiceTest.shouldThrowAnExceptionIfAccountIsNotFound(LoginServiceTest.java:134)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.testng.internal.MethodHelper.invokeMethod(MethodHelper.java:607)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:517)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:669)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:956)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:110)
	at org.testng.TestRunner.runWorkers(TestRunner.java:759)
	at org.testng.TestRunner.privateRun(TestRunner.java:592)
	at org.testng.TestRunner.run(TestRunner.java:486)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:332)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:327)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:299)
	at org.testng.SuiteRunner.run(SuiteRunner.java:204)
	at org.testng.TestNG.createAndRunSuiteRunners(TestNG.java:877)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:842)
	at org.testng.TestNG.run(TestNG.java:751)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:74)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:92)
	at org.apache.maven.surefire.Surefire.run(Surefire.java:177)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.apache.maven.surefire.booter.SurefireBooter.runSuitesInProcess(SurefireBooter.java:345)
	at org.apache.maven.surefire.booter.SurefireBooter.main(SurefireBooter.java:1009)
]]>
            </full-stacktrace>
          </exception>
        </test-method>
        <test-method status="PASS" signature="setupMocksAndTargetForDefaultBehavior()" name="setupMocksAndTargetForDefaultBehavior" is-config="true" duration-ms="284" started-at="2010-02-08T15:55:09Z" finished-at="2010-02-08T15:55:09Z">
        </test-method>
      </class>
    </test>
    <test name="IntegrationTests">
      <class name="com.pillartech.blog.dao.AccountDaoTest">
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="6" started-at="2010-02-08T15:55:12Z" finished-at="2010-02-08T15:55:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.pillartech.blog.dao.AccountDaoTest.testCreateAccountAddsARow()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="testFindByUsernameLimitsByUsername()" name="testFindByUsernameLimitsByUsername" duration-ms="3" started-at="2010-02-08T15:55:12Z" finished-at="2010-02-08T15:55:12Z">
        </test-method>
        <test-method status="PASS" signature="createAccountFixture()" name="createAccountFixture" is-config="true" duration-ms="1" started-at="2010-02-08T15:55:12Z" finished-at="2010-02-08T15:55:12Z">
        </test-method>
        <test-method status="PASS" signature="createAccountFixture()" name="createAccountFixture" is-config="true" duration-ms="0" started-at="2010-02-08T15:55:12Z" finished-at="2010-02-08T15:55:12Z">
        </test-method>
        <test-method status="PASS" signature="createAccountFixture()" name="createAccountFixture" is-config="true" duration-ms="0" started-at="2010-02-08T15:55:12Z" finished-at="2010-02-08T15:55:12Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="2" started-at="2010-02-08T15:55:12Z" finished-at="2010-02-08T15:55:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.pillartech.blog.dao.AccountDaoTest.testUpdateLeavesTheSameNumberOfRows()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="2" started-at="2010-02-08T15:55:12Z" finished-at="2010-02-08T15:55:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.pillartech.blog.dao.AccountDaoTest.testFindByUsernameReturnsNullWithNothingInTheDb()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="testUpdateLeavesTheSameNumberOfRows()" name="testUpdateLeavesTheSameNumberOfRows" duration-ms="3" started-at="2010-02-08T15:55:12Z" finished-at="2010-02-08T15:55:12Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="11" started-at="2010-02-08T15:55:12Z" finished-at="2010-02-08T15:55:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.pillartech.blog.dao.AccountDaoTest.testUpdateChangesTheDbRow()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="3" started-at="2010-02-08T15:55:12Z" finished-at="2010-02-08T15:55:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.pillartech.blog.dao.AccountDaoTest.testDeleteAccountRemovesARow()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="60" started-at="2010-02-08T15:55:12Z" finished-at="2010-02-08T15:55:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.pillartech.blog.dao.AccountDaoTest.testUpdateChangesTheDbRow()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="createAccountFixture()" name="createAccountFixture" is-config="true" duration-ms="0" started-at="2010-02-08T15:55:12Z" finished-at="2010-02-08T15:55:12Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="3" started-at="2010-02-08T15:55:12Z" finished-at="2010-02-08T15:55:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.pillartech.blog.dao.AccountDaoTest.testCreateAccountAddsARow()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="testDeleteAccountLeavesNoTrace()" name="testDeleteAccountLeavesNoTrace" duration-ms="4" started-at="2010-02-08T15:55:12Z" finished-at="2010-02-08T15:55:12Z">
        </test-method>
        <test-method status="PASS" signature="createAccountFixture()" name="createAccountFixture" is-config="true" duration-ms="1" started-at="2010-02-08T15:55:12Z" finished-at="2010-02-08T15:55:12Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="4" started-at="2010-02-08T15:55:12Z" finished-at="2010-02-08T15:55:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.pillartech.blog.dao.AccountDaoTest.testUpdateLeavesTheSameNumberOfRows()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="4" started-at="2010-02-08T15:55:12Z" finished-at="2010-02-08T15:55:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.pillartech.blog.dao.AccountDaoTest.testDeleteAccountLeavesNoTrace()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="3" started-at="2010-02-08T15:55:12Z" finished-at="2010-02-08T15:55:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.pillartech.blog.dao.AccountDaoTest.testFindByUsernameLimitsByUsername()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="testUpdateChangesTheDbRow()" name="testUpdateChangesTheDbRow" duration-ms="85" started-at="2010-02-08T15:55:12Z" finished-at="2010-02-08T15:55:12Z">
        </test-method>
        <test-method status="PASS" signature="testFindByUsernameReturnsNullWithNothingInTheDb()" name="testFindByUsernameReturnsNullWithNothingInTheDb" duration-ms="116" started-at="2010-02-08T15:55:12Z" finished-at="2010-02-08T15:55:12Z">
        </test-method>
        <test-method status="PASS" signature="createAccountFixture()" name="createAccountFixture" is-config="true" duration-ms="0" started-at="2010-02-08T15:55:12Z" finished-at="2010-02-08T15:55:12Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="3" started-at="2010-02-08T15:55:12Z" finished-at="2010-02-08T15:55:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.pillartech.blog.dao.AccountDaoTest.testCreateAccountPopulatesAllFields()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2010-02-08T15:55:12Z" finished-at="2010-02-08T15:55:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.pillartech.blog.dao.AccountDaoTest.testFindByUsernameReturnsTheCorrectRow()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="createAccountFixture()" name="createAccountFixture" is-config="true" duration-ms="0" started-at="2010-02-08T15:55:12Z" finished-at="2010-02-08T15:55:12Z">
        </test-method>
        <test-method status="PASS" signature="testCreateAccountAddsARow()" name="testCreateAccountAddsARow" duration-ms="17" started-at="2010-02-08T15:55:12Z" finished-at="2010-02-08T15:55:12Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="2969" started-at="2010-02-08T15:55:09Z" finished-at="2010-02-08T15:55:12Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="2" started-at="2010-02-08T15:55:12Z" finished-at="2010-02-08T15:55:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.pillartech.blog.dao.AccountDaoTest.testDeleteAccountRemovesARow()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="testFindByUsernameReturnsTheCorrectRow()" name="testFindByUsernameReturnsTheCorrectRow" duration-ms="28" started-at="2010-02-08T15:55:12Z" finished-at="2010-02-08T15:55:12Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="2" started-at="2010-02-08T15:55:12Z" finished-at="2010-02-08T15:55:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.pillartech.blog.dao.AccountDaoTest.testCreateAccountPopulatesTheId()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="2" started-at="2010-02-08T15:55:12Z" finished-at="2010-02-08T15:55:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.pillartech.blog.dao.AccountDaoTest.testCreateAccountPopulatesAllFields()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="testCreateAccountPopulatesTheId()" name="testCreateAccountPopulatesTheId" duration-ms="2" started-at="2010-02-08T15:55:12Z" finished-at="2010-02-08T15:55:12Z">
        </test-method>
        <test-method status="PASS" signature="createAccountFixture()" name="createAccountFixture" is-config="true" duration-ms="0" started-at="2010-02-08T15:55:12Z" finished-at="2010-02-08T15:55:12Z">
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="17" started-at="2010-02-08T15:55:12Z" finished-at="2010-02-08T15:55:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.pillartech.blog.dao.AccountDaoTest.testDeleteAccountLeavesNoTrace()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="3" started-at="2010-02-08T15:55:12Z" finished-at="2010-02-08T15:55:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.pillartech.blog.dao.AccountDaoTest.testCreateAccountPopulatesTheId()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="2" started-at="2010-02-08T15:55:12Z" finished-at="2010-02-08T15:55:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.pillartech.blog.dao.AccountDaoTest.testFindByUsernameReturnsTheCorrectRow()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)" name="springTestContextAfterTestMethod" is-config="true" duration-ms="3" started-at="2010-02-08T15:55:12Z" finished-at="2010-02-08T15:55:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.pillartech.blog.dao.AccountDaoTest.testFindByUsernameLimitsByUsername()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="14" started-at="2010-02-08T15:55:12Z" finished-at="2010-02-08T15:55:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.pillartech.blog.dao.AccountDaoTest.testFindByUsernameReturnsNullWithNothingInTheDb()]]>
              </value>
            </param>
          </params>
        </test-method>
        <test-method status="PASS" signature="createAccountFixture()" name="createAccountFixture" is-config="true" duration-ms="0" started-at="2010-02-08T15:55:12Z" finished-at="2010-02-08T15:55:12Z">
        </test-method>
        <test-method status="PASS" signature="testCreateAccountPopulatesAllFields()" name="testCreateAccountPopulatesAllFields" duration-ms="2" started-at="2010-02-08T15:55:12Z" finished-at="2010-02-08T15:55:12Z">
        </test-method>
        <test-method status="PASS" signature="testDeleteAccountRemovesARow()" name="testDeleteAccountRemovesARow" duration-ms="3" started-at="2010-02-08T15:55:12Z" finished-at="2010-02-08T15:55:12Z">
        </test-method>
        <test-method status="PASS" signature="createAccountFixture()" name="createAccountFixture" is-config="true" duration-ms="0" started-at="2010-02-08T15:55:12Z" finished-at="2010-02-08T15:55:12Z">
        </test-method>
      </class>
    </test>
  </suite>
</testng-results>
